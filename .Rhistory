#   stop("The path folder could not be found. Please change the path")
# }
if (missing(gene.set)) {
stop("Gene set argument is required")
}
## Load .rnk data
path.rnk <- list.files(path = file.path(path, "edb"),
pattern = ".rnk$", full.names = TRUE)
gsea.rnk <- read.delim(file = path.rnk, header = FALSE)
colnames(gsea.rnk) <- c("hgnc.symbol", "metric")
if (missing(metric.range)) {
metric.range <- c(min(gsea.rnk$metric), max(gsea.rnk$metric))
}
## Load .edb data
path.edb <- list.files(path = file.path(path, "edb"),
pattern = ".edb$", full.names = TRUE)
gsea.edb <- read.delim(file = path.edb,
header = FALSE, stringsAsFactors = FALSE)
gsea.edb <- unlist(gsea.edb)
gsea.metric <- gsea.edb[grep("METRIC=", gsea.edb)]
gsea.metric <- unlist(strsplit(gsea.metric, " "))
gsea.metric <- gsea.metric[grep("METRIC=", gsea.metric)]
gsea.metric <- gsub("METRIC=", "", gsea.metric)
gsea.edb <- gsea.edb[grep("<DTG", gsea.edb)]
# Select the right gene set
if (length(gsea.edb) == 0) {
stop(paste("The gene set name was not found, please provide",
"a correct name"))
}
if (length(grep(paste0(gsub(".\\$(.*$)", "\\1", gene.set), " "), gsea.edb)) > 1) {
warning(paste("More than 1 gene set matched the gene.set",
"argument; the first match is plotted"))
}
gsea.edb <- gsea.edb[grep(paste0(gsub(".\\$(.*$)", "\\1", gene.set), " "), gsea.edb)[1]]
# Get template name
gsea.edb <- gsub(".*TEMPLATE=(.*)", "\\1", gsea.edb)
gsea.edb <- unlist(strsplit(gsea.edb, " "))
gsea.template <- gsea.edb[1]
# Get gene set name
gsea.gene.set <- gsea.edb[2]
gsea.gene.set <- gsub("GENESET=gene_sets.gmt#", "", gsea.gene.set)
# Get enrichment score
gsea.enrichment.score <- gsea.edb[3]
gsea.enrichment.score <- gsub("ES=", "", gsea.enrichment.score)
# Get gene set name
gsea.normalized.enrichment.score <- gsea.edb[4]
gsea.normalized.enrichment.score <- gsub("NES=", "",
gsea.normalized.enrichment.score)
# Get nominal p-value
gsea.p.value <- gsea.edb[5]
gsea.p.value <- gsub("NP=", "", gsea.p.value)
gsea.p.value <- as.numeric(gsea.p.value)
# Get FDR
gsea.fdr <- gsea.edb[6]
gsea.fdr <- gsub("FDR=", "", gsea.fdr)
gsea.fdr <- as.numeric(gsea.fdr)
# Get hit indices
gsea.edb <- gsea.edb[grep("HIT_INDICES=", gsea.edb):length(gsea.edb)]
gsea.hit.indices <- gsea.edb[seq_len(grep("ES_PROFILE=", gsea.edb) - 1)]
gsea.hit.indices <- gsub("HIT_INDICES=", "", gsea.hit.indices)
gsea.hit.indices <- as.integer(gsea.hit.indices)
# Get ES profile
gsea.edb <- gsea.edb[grep("ES_PROFILE=", gsea.edb):length(gsea.edb)]
gsea.es.profile <- gsea.edb[seq_len(grep("RANK_AT_ES=", gsea.edb) - 1)]
gsea.es.profile <- gsub("ES_PROFILE=", "", gsea.es.profile)
gsea.es.profile <- as.numeric(gsea.es.profile)
if(!is.null(outpath))
pdf(paste0(outpath, '/gsea_', gene.set, '.pdf'),width = 6.9, height = 6.9, useDingbats = F)
## Create GSEA plot
# Save default for resetting
def.par <- par(no.readonly = TRUE)
# Create a division of the device
gsea.layout <- layout(matrix(c(1, 2, 3, 4)), heights = c(1.7, 0.5, 0.2, 2))
#layout.show(gsea.layout)
# Create plots
par(mar = c(0, 5, 2, 2))
plot(c(1, gsea.hit.indices, length(gsea.rnk$metric)),
c(0, gsea.es.profile, 0), type = "l", col = "red", lwd = 1.5, xaxt = "n",
xaxs = "i", xlab = "", ylab = "Enrichment score (ES)",
main = list(gsea.gene.set, font = 1, cex = 1),
panel.first = {
abline(h = seq(round(min(gsea.es.profile), digits = 1),
max(gsea.es.profile), 0.1),
col = "gray95", lty = 2)
abline(h = 0, col = "gray50", lty = 2)
})
plot.coordinates <- par("usr")
if(gsea.enrichment.score < 0) {
text(length(gsea.rnk$metric) * 0.01, plot.coordinates[3] * 0.98,
paste("Nominal p-value:", gsea.p.value, "\nFDR:", gsea.fdr, "\nES:",
gsea.enrichment.score, "\nNormalized ES:",
gsea.normalized.enrichment.score), adj = c(0, 0))
} else {
text(length(gsea.rnk$metric) * 0.99, plot.coordinates[4] - ((plot.coordinates[4] - plot.coordinates[3]) * 0.03),
paste("Nominal p-value:", gsea.p.value, "\nFDR:", gsea.fdr, "\nES:",
gsea.enrichment.score, "\nNormalized ES:",
gsea.normalized.enrichment.score, "\n"), adj = c(1, 1))
}
par(mar = c(0, 5, 0, 2))
plot(0, type = "n", xaxt = "n", xaxs = "i", xlab = "", yaxt = "n",
ylab = "", xlim = c(1, length(gsea.rnk$metric)))
abline(v = gsea.hit.indices, lwd = 0.75)
par(mar = c(0, 5, 0, 2))
rank.colors <- gsea.rnk$metric - metric.range[1]
rank.colors <- rank.colors / (metric.range[2] - metric.range[1])
rank.colors <- ceiling(rank.colors * 255 + 1)
tryCatch({
rank.colors <- colorRampPalette(c("blue", "white", "red"))(256)[rank.colors]
}, error = function(e) {
stop("Please use the metric.range argument to provide a metric range that",
"includes all metric values")
})
# Use rle to prevent too many objects
rank.colors <- rle(rank.colors)
barplot(matrix(rank.colors$lengths), col = rank.colors$values, border = NA, horiz = TRUE, xaxt = "n", xlim = c(1, length(gsea.rnk$metric)))
box()
text(length(gsea.rnk$metric) / 2, 0.7,
labels = ifelse(!missing(class.name), class.name, gsea.template))
text(length(gsea.rnk$metric) * 0.01, 0.7, "Positive", adj = c(0, NA))
text(length(gsea.rnk$metric) * 0.99, 0.7, "Negative", adj = c(1, NA))
par(mar = c(5, 5, 0, 2))
rank.metric <- rle(round(gsea.rnk$metric, digits = 2))
plot(gsea.rnk$metric, type = "n", xaxs = "i",
xlab = "Rank in ordered gene list", xlim = c(0, length(gsea.rnk$metric)),
ylim = metric.range, yaxs = "i",
ylab = if(gsea.metric == "None") {"Ranking metric"} else {gsea.metric},
panel.first = abline(h = seq(metric.range[1] / 2,
metric.range[2] - metric.range[1] / 4,
metric.range[2] / 2), col = "gray95", lty = 2))
barplot(rank.metric$values, col = "lightgrey", lwd = 0.1, xaxs = "i",
xlab = "Rank in ordered gene list", xlim = c(0, length(gsea.rnk$metric)),
ylim = c(-1, 1), yaxs = "i", width = rank.metric$lengths, border = NA,
ylab = ifelse(gsea.metric == "None", "Ranking metric", gsea.metric), space = 0, add = TRUE)
box()
if(!is.null(outpath))
dev.off()
# Reset to default
par(def.par)
}
replotGSEA('Camilleri_set2.GseaPreranked.1516047439103/', 'GO_CELL_CELL_ADHESION_VIA_PLASMA_MEMBRANE_ADHESION_MOLECULES', 'GO', outpath = './')
gseaHeatmap('../../01_03_18/Set2/t2_vs_t1_normCPM.txt', '../../01_03_18/Set2/t2_vs_t1_DEstatAll.txt', '~/Dropbox/Mayo/Figure examples/msigdb.v6.1.symbols.gmt', 500, 'HALLMARK_TNFA_SIGNALING_VIA_NFKB', 'GO_PEPTIDE_METABOLIC_PROCESS',c(rep('t1', 8), rep('t2',4)), c('blue','white','red'), outpath = './', rankCol = F)
gseaHeatmap('../../01_03_18/Set2/t2_vs_t1_normCPM.txt', '../../01_03_18/Set2/t2_vs_t1_DEstatAll.txt', '~/Dropbox/Mayo/Figure examples/msigdb.v6.1.symbols.gmt', 3000, 'HALLMARK_TNFA_SIGNALING_VIA_NFKB', 'GO_PEPTIDE_METABOLIC_PROCESS',c(rep('t1', 8), rep('t2',4)), c('blue','white','red'), outpath = './', rankCol = F)
replotGSEA('Camilleri_set2.GseaPreranked.1516047439103/', 'HALLMARK_TNFA_SIGNALING_VIA_NFKB', 'GO', outpath = './')
replotGSEA('Camilleri_set2.GseaPreranked.1516047439103/', 'GO_PEPTIDE_METABOLIC_PROCESS', 'GO', outpath = './')
install.packages('plumber')
library(plumber)
r <- plumb("Desktop/test.R")
r$run(port=8000)
library(shiny)
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
install.packages('shinydashboard')
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
install.packages('shinythemes')
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
library(BiocInstaller)
biocLite('RUVSeq')
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
install.packages('slidify')
require(devtools)
install_github("slidify", "ramnathv")
library(slidify)
library(slidifyLibraries)
install_github('slidifyLibraries', 'ramnathv')
library(DESeq2)
biocLite('DESeq2')
library(XBSeq)
biocLite('XBSeq')
library(scde)
biocLite('scde')
library(BPSC)
biocLite('BPSC')
install_github("BPSC","nghiavtr")
library(monocle)
install.packages()
installed.packages()
installed.packages()[,1]
library('scatterplot3d')
install.packages('scatterplot3d')
install.packages('GGally')
cranpacks <- c('shiny', 'shinydashboard', 'magrittr', 'shinythemes', 'colorspace', 'doParallel', 'ggplot2', 'scatterplot3d', 'GGally', 'data.table', 'dplyr', 'threejs', 'd3heatmap', 'metricsgraphics', 'networkD3', 'DT', 'statmod', 'igraph', 'NetSAM', 'LPCM')
for(i in cranpacks){
if(! i %in% installed.packages()[,1])
install.packages(i)
}
cranpacks <- c('shiny', 'shinydashboard', 'magrittr', 'shinythemes', 'colorspace', 'doParallel', 'ggplot2', 'scatterplot3d', 'GGally', 'data.table', 'dplyr', 'threejs', 'd3heatmap', 'metricsgraphics', 'networkD3', 'DT', 'statmod', 'igraph', 'LPCM')
for(i in cranpacks){
if(! i %in% installed.packages()[,1])
install.packages(i)
}
for(i in biocpacks){
if(! i %in% installed.packages()[,1])
biocLite(i)
}
biocpacks <- c('RUVSeq', 'DESeq', 'DESeq2', 'XBSeq', 'edgeR', 'limma', 'scde', 'monocle', 'EBSeq', 'NetSAM')
for(i in biocpacks){
if(! i %in% installed.packages()[,1])
biocLite(i)
}
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
install.packages('rga')
devtools::install_github("rga", "skardhamar")
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
shiny::runApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
install.packages('rsconnect')
rsconnect::deployApp('Dropbox/gi')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
library(rsconnect)
rsconnect::setAccountInfo(name='yuanhangliu', token='EB27302740BB8670952930FA7F01F91B', secret='LD/b3akEVUg/5bTNddFX6+oVoizMDY355Khmvo9x')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseqVis ')
biocpacks <- c('RUVSeq', 'DESeq', 'DESeq2', 'XBSeq', 'edgeR', 'limma', 'scde', 'monocle', 'EBSeq', 'NetSAM', 'MAST', 'ROTS')
for(i in biocpacks){
if(! i %in% installed.packages()[,1])
biocLite(i)
}
library(BiocInstaller)
for(i in biocpacks){
if(! i %in% installed.packages()[,1])
biocLite(i)
}
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseqVis ')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseqVis')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseqVis')
rsconnect::setAccountInfo(name='yuanhangliu', token='EB27302740BB8670952930FA7F01F91B', secret='LD/b3akEVUg/5bTNddFX6+oVoizMDY355Khmvo9x')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseqVis')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseq-Vis')
library(automap)
install.packages(automap)
install.packages('automap')
library(calibrate)
install.packages('calibrate')
install.packages('e1071')
install.packages('e1071')
install.packages('gstat')
install.packages('hydroGOF')
install.packages('hydroTSM')
install.packages('intervals')
install.packages('maptools')
install.packages('sp')
rsconnect::deployApp('Dropbox/gitrepository/bringd32biology/scRNA-seqVis/', appName = 'scRNAseq-Vis')
warnings()
dataMat <- read.delim('clipboard')
dataMat <- read.table('clipboard')
library(BiocInstaller)
biocLite('BiocStyle')
library(BiocInstaller)
biocLite('SPIA')
setRepositories(ind=1:6)
options(repos="http://cran.rstudio.com/")
if(!require(devtools)) { install.packages("devtools") }
devtools::install_github('kdaily/shinyPathway')
install.packages('paxtoolsr')
biocLite('paxtoolsr')
library(BiocInstaller)
biocLite('paxtoolsr')
setRepositories(ind=1:6)
options(repos="http://cran.rstudio.com/")
if(!require(devtools)) { install.packages("devtools") }
devtools::install_github('kdaily/shinyPathway')
shinyPathway::runExample()
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk-10.jdk/Contents/Home/lib/server/libjvm.dylib')
library(rJava)
shinyPathway::runExample()
devtools::install_github("cytoscape/r-cytoscape.js")
shinyPathway::runExample()
shinyPathway::runExample()
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-10.jdk/Contents/Home/lib/server/libjvm.dylib')
shinyPathway::runExample()
system(paste0('cat ', outPath, '/runEdgeR.Rmd', ' | ', 'sed ', 's/t2_vs_t1/', cm1, '/g > ', outPath, '/runEdgeR.Rmd'))
paste0('cat ', outPath, '/runEdgeR.Rmd', ' | ', 'sed ', 's/t2_vs_t1/', cm1, '/g > ', outPath, '/runEdgeR.Rmd')
paste0('cat ', outPath, '/runEdgeR.Rmd', ' | ', 'sed ', 's/t2_vs_t1/', 't3_vs_t1', '/g > ', 'Dropbox/', '/runEdgeR.Rmd')
paste0('cat ', 'Dropbox/', '/runEdgeR.Rmd', ' | ', 'sed ', 's/t2_vs_t1/', 't3_vs_t1', '/g > ', 'Dropbox/', '/runEdgeR.Rmd')
rm(list = ls())
filePath="Dropbox/Mayo/Projects/Howe_charles/dataMat.txt"
sampleIn="Dropbox/Mayo/Projects/Howe_charles/sampleInfo.txt"
control='t2'
case='t3'
exprCutoff=0.01
fc=2
pVal=0.05
pFlag=1
paired=1
outPath='/Users/m182980/Dropbox/Mayo/Projects/Howe_charles/t3_vs_t2/'
exprCutoff=as.numeric(exprCutoff)
fc=as.numeric(fc)
pVal=as.numeric(pVal)
pFlag=as.numeric(pFlag)
paired=as.numeric(paired)
################################# main script
#### load datasets
message(paste0('Loading datasets!', '\n'))
dataMat <- fread(filePath, data.table = F, stringsAsFactors = F, check.names = F)
requiredPacks <- c('edgeR', 'data.table', 'gplots', 'ggplot2', 'threejs', 'htmlwidgets', 'metricsgraphics', 'rCharts')
for(i in requiredPacks){
if(!require(i, character.only = T)) biocLite(i)
library(i, character.only = T)
}
################################# main script
#### load datasets
message(paste0('Loading datasets!', '\n'))
dataMat <- fread(filePath, data.table = F, stringsAsFactors = F, check.names = F)
sampleInfo <- fread(sampleIn, data.table = F, stringsAsFactors = F, check.names = F)
s1 <- sapply(sampleInfo$samples, function(i) grep(paste0('^', i, '$'), colnames(dataMat)))
inforMat <- dataMat[,1:(ncol(dataMat)-length(s1))]
dataMat <- dataMat[,(ncol(dataMat)-length(s1)+1):ncol(dataMat)]
if(length(intersect(sampleInfo[,1], colnames(dataMat))) != ncol(dataMat)){
stop('Check sample info file!')
}
#### filter genes based on abundance
message(paste0('Filtering genes based on abundance!', '\n'))
cat('number of genes before filtering: ', nrow(dataMat), '\n')
idx1 <- grep(paste0('^', control, '$'), sampleInfo$diagnosis)
idx1 <- sapply(sampleInfo$samples[idx1], function(i) grep(paste0('^', i, '$'), colnames(dataMat)))
idx2 <- grep(paste0('^', case, '$'), sampleInfo$diagnosis)
idx2 <- sapply(sampleInfo$samples[idx2], function(i) grep(paste0('^', i, '$'), colnames(dataMat)))
isExpr <- apply(cpm(dataMat[,idx1]), 1, function(x) mean(x) > 2) | apply(cpm(dataMat[,idx2]), 1, function(x) mean(x) > 2)
dataMat <- dataMat[isExpr,]
inforMat <- inforMat[isExpr,]
cat('number of genes after filtering: ', nrow(dataMat), '\n')
#### run edgeR
message(paste0('Carrying out differential expression analysis using edgeR!', '\n'))
cds <- DGEList(counts = dataMat, group = sampleInfo$diagnosis)
cds <- calcNormFactors(cds)
if(paired==1){
design <- model.matrix(~pairinfo+diagnosis, data = sampleInfo)
cds <- estimateGLMRobustDisp(cds,design)
fit <- glmFit(cds, design)
lrt <- glmLRT(fit)
}else{
design <- model.matrix(~0+diagnosis, data = sampleInfo)
colnames(design) <- levels(cds$samples$group)
cds <- estimateGLMRobustDisp(cds,design)
fit <- glmFit(cds, design)
lrt<- eval(parse(text = paste0("glmLRT(fit,contrast=makeContrasts(",case,"-",control,",levels=design))")))
}
design
design <- model.matrix(~pairinfo+diagnosis, data = sampleInfo)
?estimateGLMRobustDisp
?makeContrasts
contrast=makeContrasts(",case,"-",control,",levels=design)
eval(contrast=makeContrasts(",case,"-",control,",levels=design))
eval(parse(contrast=makeContrasts(",case,"-",control,",levels=design)))
eval(parse("contrast=makeContrasts(",case,"-",control,",levels=design)"))
design
design <- model.matrix(~0+diagnosis, data = sampleInfo)
eval(parse("contrast=makeContrasts(",case,"-",control,",levels=design)"))
design
colnames(design) <- levels(cds$samples$group)
design
eval(parse("contrast=makeContrasts(",case,"-",control,",levels=design)"))
eval(parse("contrast=makeContrasts(t2","-","t1",",levels=design)"))
design
lrt<- eval(parse(text = paste0("glmLRT(fit,contrast=makeContrasts(",case,"-",control,",levels=design))")))
case <- 't2'
control <- 't1'
lrt<- eval(parse(text = paste0("glmLRT(fit,contrast=makeContrasts(",case,"-",control,",levels=design))")))
design <- model.matrix(~0+diagnosis, data = sampleInfo)
colnames(design) <- levels(cds$samples$group)
cds <- estimateGLMRobustDisp(cds,design)
fit <- glmFit(cds, design)
lrt<- eval(parse(text = paste0("glmLRT(fit,contrast=makeContrasts(",case,"-",control,",levels=design))")))
contrast=makeContrasts("t2","-","t1",levels=design)
contrast=makeContrasts(paste0("t2","-","t1",levels=design))
contrast=makeContrasts(paste0("t2","-","t1",levels=design))
contrast=makeContrasts(paste0("t2","-","t1"),levels=design)
contrast
design <- model.matrix(~pairinfo+diagnosis, data = sampleInfo)
design
colnames(design)
filePath="Dropbox/Mayo/Projects/Howe_charles/dataMat.txt"
sampleIn="Dropbox/Mayo/Projects/Howe_charles/sampleInfo.txt"
control='t2'
case='t3'
exprCutoff=0.01
fc=2
pVal=0.05
pFlag=1
paired=1
outPath='/Users/m182980/Dropbox/Mayo/Projects/Howe_charles/t3_vs_t2/'
design <- model.matrix(~pairinfo+diagnosis, data = sampleInfo)
cds <- estimateGLMRobustDisp(cds,design)
fit <- glmFit(cds, design)
if(control=='t1'){
coef <- grep(paste0("diagnosis", case), colnames(design))
lrt <- glmLRT(fit, coef = coef)
}
contrast <- rep(0, length(unique(sampleInfo$pairinfo)) + length(unique(sampleInfo$diagnosis))-1)
contrast
idxcontrol <- grep(paste0("diagnosis", control), colnames(design))
idxcontrol
idxcase <- grep(paste0("diagnosis", case), colnames(design))
idxcase
contrast[idxcontrol] <- -1
contrast[idxcase] <- 1
lrt <- glmLRT(fit, contrast = contrast)
topTags(lrt)
topTags(lrt, n = 100)
topTags(lrt, n = 1000)
tail(topTags(lrt, n = 1000))
tmp <- topTags(lrt, n = 1000)
tail(tmp)
str(tmp)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
devtools::install_github("pachterlab/sleuth")
library(sleuth)
log2(0.4)
log2(3)
log2(0.5)
setwd('Dropbox/Mayo/Projects/Walter/')
dataMat <- readxl::read_excel('TT_MSC_SampleMap_06-21-18.xls', skip=7)
dataMat[1:5,1:5]
dataMat <- dataMat[-1,]
dataMat[1:5,1:5]
dataMat <- read.delim('GeneCount_raw.tsv', header = T, stringsAsFactors = F)
colnames(dataMat)
colnames(dataMat) <- c(colnames(dataMat)[1:6], gsub('_GeneCount', '', colnammes(dataMat)[-c(1:6)]))
colnames(dataMat) <- c(colnames(dataMat)[1:6], gsub('_GeneCount', '', colnames(dataMat)[-c(1:6)]))
colnames(dataMat)
head(dataMat)
write.table(dataMat, 'dataMat.txt', sep='\t', row.names = F, col.names = T, quote = F)
getwd()
sampleInfo <- readxl::read_excel('TT_MSC_SampleMap_06-21-18.xls', skip=7)
sampleInfo[1:5, 1:5]
sampleInfo <- sampleInfo[-1,]
sampleInfo[1:5, 1:5]
sampleInfo[1:10, 1:10]
sampleInfo[1:15, 1:10]
sampleInfo[1:15, 1:15]
as.data.frame(sampleInfo[1:15, 1:15])
?dir.create
for(i in 1:7) dir.create(paste0('Project_TT',i))
for(i in 1:7) {
dir.create(paste0('Project_TT',i))
samplefile <- data.frame(samples=sampleInfo[1:12,4],
diagnosis=sampleInfo[1:12,4+i])
samplefile$diagnosis[is.na(samplefile$diagnosis)] <- 'GrpC'
write.table(samplefile, paste0('Project_TT',i,'/sampleInfo.txt'), row.names = F, col.names = T, sep = '\t', quote = F)
}
for(i in 1:7) {
dir.create(paste0('Project_TT',i))
samplefile <- data.frame(samples=sampleInfo[1:12,4],
diagnosis=sampleInfo[1:12,4+i])
samplefile$diagnosis[samplefile$diagnosis == '<NA>'] <- 'GrpC'
write.table(samplefile, paste0('Project_TT',i,'/sampleInfo.txt'), row.names = F, col.names = T, sep = '\t', quote = F)
}
is.na(sampleInfo$Project_TT1)
samplefile <- data.frame(samples=sampleInfo[1:12,4],
diagnosis=sampleInfo[1:12,4+i])
samplefile
samplefile$diagnosis[is.na(samplefile$diagnosis)] <- 'GrpC'
is.na(samplefile$diagnosis)
samplefile$Project_TT1
samplefile <- data.frame(samples=unlist(sampleInfo[1:12,4]),
diagnosis=unlist(sampleInfo[1:12,4+i]))
samplefile
samplefile$diagnosis[is.na(samplefile$diagnosis)] <- 'GrpC'
is.na(samplefile$diagnosis)
samplefile
str(samplefile)
samplefile <- data.frame(samples=unlist(sampleInfo[1:12,4]),
diagnosis=unlist(sampleInfo[1:12,4+i]), stringsAsFactors = F)
samplefile$diagnosis[is.na(samplefile$diagnosis)] <- 'GrpC'
smaplefile
samplefile
for(i in 1:7) {
dir.create(paste0('Project_TT',i))
samplefile <- data.frame(samples=unlist(sampleInfo[1:12,4]),
diagnosis=unlist(sampleInfo[1:12,4+i]), stringsAsFactors = F)
samplefile$diagnosis[is.na(samplefile$diagnosis)] <- 'GrpC'
write.table(samplefile, paste0('Project_TT',i,'/sampleInfo.txt'), row.names = F, col.names = T, sep = '\t', quote = F)
}
getwd()
setwd('../../../gitrepository/DVBoost/')
fileB <- 'NA12878_DEL_intersect.annotated.bed'
#### test on DUP sets
r2 <- read.delim(fileB, stringsAsFactors = FALSE)
SV.ID.vec_r2 <- paste(r2$ChrA,":",r2$Start,"_", r2$End, "@",r2$SVType, sep = "")
avg.L.vec_r2 <- (r2$L_START_STRICTMASK + r2$L_END_STRICTMASK)/2
avg.H.vec_r2 <- (r2$H_START_STRICTMASK + r2$H_END_STRICTMASK)/2
avg.Z.vec_r2 <- (r2$Z_START_STRICTMASK + r2$Z_END_STRICTMASK)/2
avg.Q.vec_r2 <- (r2$Q_START_STRICTMASK + r2$Q_END_STRICTMASK)/2
file_PE =paste(sample,"PE",sep="_")
file_PE
file_SR=paste(sample,"SR", sep="_")
sample <- 'NA12878'
file_PE =paste(sample,"PE",sep="_")
file_PE
file_SR=paste(sample,"SR", sep="_")
file_SR
## CNVMAP from CNV map publication, CNVR from 1000genomes
## see /data2/external_data/Kocher_Jean-Pierre_m026645/s200929.CNV_SV_Strategy_for_WGS/annotation/polymorphic/readme.txt
tmp.mtx_r2 <- cbind( PE = r2[,file_PE], SR = r2[,file_SR],CNVMAP=r2$POLYMORPHIC_CNVMAP,CNVR=r2$POLYMORPHIC_CNVR,
avgL = avg.L.vec_r2, avgH = avg.H.vec_r2,
avgZ = avg.Z.vec_r2, avgQ = avg.Q.vec_r2, SVLen=r2$SVLen,Germline=r2$GERMLINE_ARTIFACT)
rownames(tmp.mtx_r2) <- SV.ID.vec_r2
is.likely.true.test <- ifelse(tmp.mtx_r2$CNVMAP ==1 | tmp.mtx_r2$CNVR==1 | as.numeric(r2$overlap_1K) > 0,1,0)
str(r2)
sum(r2$overlap_1K)
sum(r2$overlap_1K > 0)
is.likely.true.test <- ifelse(tmp.mtx_r2$CNVMAP ==1 | tmp.mtx_r2$CNVR==1 | as.numeric(r2$overlap_1K) > 0,1,0)
str(tmp.mtx_r2)
head(tmp.mtx_r2)
class(tmp.mtx_r2)
tmp.mtx_r2 <- as.data.frame(tmp.mtx_r2)
is.likely.true.test <- ifelse(tmp.mtx_r2$CNVMAP ==1 | tmp.mtx_r2$CNVR==1 | as.numeric(r2$overlap_1K) > 0,1,0)
table(is.likely.true.test)
is.likely.true.test
is.likely.true.test[is.na(is.likely.true.test)] <- 0
table(is.likely.true.test)
